# FINAL PROFESSIONAL VERSION v21.0 - Scraper Fallback
name: Video Uploader v21.0 (Scraper Fallback)

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Video URL'
        required: true
      message_id:
        description: 'Discord Message ID'
        required: false

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-final-deps

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y ffmpeg
          pip install --upgrade git+https://github.com/yt-dlp/yt-dlp.git gallery-dl requests beautifulsoup4

      - name: Download Video (Optimized Hybrid Method)
        id: download
        run: |
          VIDEO_URL="${{ github.event.inputs.url }}"
          FINAL_FILENAME="video.mp4"
          DOWNLOAD_SUCCESS=false

          if [[ "$VIDEO_URL" == *"pinterest.com"* || "$VIDEO_URL" == *"pin.it"* ]]; then
            echo "Pinterest URL detected. Using embedded Python scraper..."
            
            # Correctly formatted embedded Python script
            python3 -c '
import requests, sys
from bs4 import BeautifulSoup

url = sys.argv[1]
filename = sys.argv[2]
try:
    with requests.Session() as s:
        s.headers.update({"User-Agent": "Mozilla/5.0"})
        r = s.post("https://pinterestdownloader.com/download.php", data={"url": url})
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        link = soup.find("a", class_="download-link")
        if link and link.get("href"):
            video_url = link["href"]
            print(f"Found direct URL: {video_url}")
            vr = s.get(video_url, stream=True)
            vr.raise_for_status()
            with open(filename, "wb") as f:
                for chunk in vr.iter_content(chunk_size=8192):
                    f.write(chunk)
            print("Download via scraper successful.")
        else:
            sys.exit(1)
except Exception as e:
    print(f"Scraper failed: {e}", file=sys.stderr)
    sys.exit(1)
' "$VIDEO_URL" "$FINAL_FILENAME"

            if [ -s "$FINAL_FILENAME" ]; then
                DOWNLOAD_SUCCESS=true
            else
                echo "‚ö†Ô∏è Scraper method failed. Falling back to gallery-dl..."
                gallery-dl --verbose --directory . "$VIDEO_URL"
                DOWNLOADED_FILE=$(find . -maxdepth 1 -type f -name "*.mp4")
                if [ -n "$DOWNLOADED_FILE" ]; then
                    mv "$DOWNLOADED_FILE" "$FINAL_FILENAME"
                fi
            fi
          else
            echo "Non-Pinterest URL. Using yt-dlp..."
            yt-dlp \
              --format "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" \
              --merge-output-format mp4 \
              --output "$FINAL_FILENAME" \
              "$VIDEO_URL"
          fi
          
          if [ -s "$FINAL_FILENAME" ]; then
            echo "‚úÖ Download successful. File is '$FINAL_FILENAME' and size is greater than zero."
            echo "filepath=$FINAL_FILENAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Download failed or resulted in an empty file."
            exit 1
          fi

      - name: Upload to Catbox
        id: catbox
        run: |
          FILE_PATH="${{ steps.download.outputs.filepath }}"
          UNIQUE_FILENAME="video-$(date +%s)-${RANDOM}.mp4"
          echo "Uploading $FILE_PATH as $UNIQUE_FILENAME to Catbox..."
          
          OUTPUT_LINK=$(curl -F "reqtype=fileupload" -F "fileToUpload=@$FILE_PATH;filename=$UNIQUE_FILENAME" https://catbox.moe/user/api.php)
          
          echo "Catbox API Response: '$OUTPUT_LINK'"
          if [[ -n "$OUTPUT_LINK" && "$OUTPUT_LINK" =~ ^https:// ]]; then
            echo "‚úÖ Upload successful: $OUTPUT_LINK"
            echo "link=$OUTPUT_LINK" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Upload Failed. Response was empty or not a URL."
            exit 1
          fi

      - name: Send Result to Discord
        if: success()
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ -n "$MESSAGE_ID" ]; then
            curl -s -X POST -H "Content-Type: application/json" \
            -d '{"content": "üîó Result for message '"$MESSAGE_ID"': ${{ steps.catbox.outputs.link }}"}' \
            "${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          fi
      
      - name: Notify on Failure
        if: failure()
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ -n "$MESSAGE_ID" ]; then
            curl -s -X POST -H "Content-Type: application/json" \
            -d '{"content": "‚ùå Failed to process URL for message '"$MESSAGE_ID"': ${{ github.event.inputs.url }}"}' \
            "${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          fi
