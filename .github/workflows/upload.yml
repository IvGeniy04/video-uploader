name: Video Downloader Bot

on:
  workflow_dispatch:
    inputs:
      url:
        description: "Video URL"
        required: true
        type: string
      message_id:
        description: "Discord message ID"
        required: false
        type: string

jobs:
  download:
    runs-on: ubuntu-latest

    env:
      DISCORD_RESULTS_WEBHOOK: ${{ secrets.DISCORD_RESULTS_WEBHOOK }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ffmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yt-dlp requests python-dotenv

      - name: Create working directory
        run: mkdir -p downloads

      - name: Warm up Facebook (if needed)
        if: contains(github.event.inputs.url, 'facebook.com') || contains(github.event.inputs.url, 'fb.watch')
        run: |
          curl -s -L -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
            --max-time 30 "${{ github.event.inputs.url }}" > /dev/null 2>&1 || true
          sleep 3

      - name: Download video
        id: download
        run: |
          set -e
          URL="${{ github.event.inputs.url }}"
          OUTPUT="downloads/video.mp4"

          yt-dlp \
            --retries 3 \
            --fragment-retries 3 \
            --sleep-interval 2 \
            --merge-output-format mp4 \
            --allow-unplayable-formats \
            --extractor-args "pinterest:use_webpage=True" \
            --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
            --no-check-certificate \
            -o "$OUTPUT" "$URL" || echo "failed" > downloads/status.txt

          if [ ! -f "$OUTPUT" ]; then
            echo "error=1" >> $GITHUB_OUTPUT
          else
            SIZE=$(du -m "$OUTPUT" | cut -f1)
            echo "size=$SIZE" >> $GITHUB_OUTPUT
          fi

      - name: Check file size or error
        id: check
        run: |
          if [ -f downloads/status.txt ]; then
            echo "type=error" >> $GITHUB_OUTPUT
            exit 0
          fi

          SIZE=${{ steps.download.outputs.size }}
          if [ "$SIZE" -gt 190 ]; then
            echo "type=too_large" >> $GITHUB_OUTPUT
          else
            echo "type=video" >> $GITHUB_OUTPUT
          fi

      - name: Upload to catbox (if size ok)
        if: steps.check.outputs.type == 'video'
        id: upload
        run: |
          RESPONSE=$(curl -s -F "reqtype=fileupload" -F "fileToUpload=@downloads/video.mp4" https://catbox.moe/user/api.php)
          echo "link=$RESPONSE" >> $GITHUB_OUTPUT

      - name: Send Discord notification (success)
        if: steps.check.outputs.type == 'video'
        run: |
          MSG_ID="${{ github.event.inputs.message_id }}"
          LINK="${{ steps.upload.outputs.link }}"
          WEBHOOK="${{ secrets.DISCORD_RESULTS_WEBHOOK }}"

          if [ -n "$WEBHOOK" ]; then
            if [ -n "$MSG_ID" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"üéûÔ∏è ${LINK} –¥–ª—è message $MSG_ID\"}" \
                "$WEBHOOK"
            else
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"üéûÔ∏è ${LINK}\"}" \
                "$WEBHOOK"
            fi
          fi

      - name: Handle non-video content or errors
        if: steps.check.outputs.type != 'video'
        run: |
          TYPE="${{ steps.check.outputs.type }}"
          MSG_ID="${{ github.event.inputs.message_id }}"
          WEBHOOK="${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          CONTENT=""

          case "$TYPE" in
            "too_large")
              CONTENT="‚ùå –í—ñ–¥–µ–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ (–º–∞–∫—Å. 190 –ú–ë)"
              ;;
            "image")
              CONTENT="üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞"
              ;;
            "audio")
              CONTENT="üéµ –ê—É–¥—ñ–æ"
              ;;
            "text")
              CONTENT="üìù –¢–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç"
              ;;
            "error")
              CONTENT="‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ"
              ;;
            *)
              CONTENT="üìÑ –ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
              ;;
          esac

          if [ -n "$WEBHOOK" ]; then
            if [ -n "$MSG_ID" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"$CONTENT –¥–ª—è message $MSG_ID\"}" \
                "$WEBHOOK"
            else
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"$CONTENT\"}" \
                "$WEBHOOK"
            fi
          fi
