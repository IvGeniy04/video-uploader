# FINAL PROFESSIONAL VERSION v21.0 - Scraper Fallback
name: Video Uploader v21.0 (Scraper Fallback)

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Video URL'
        required: true
      message_id:
        description: 'Discord Message ID'
        required: false

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            /usr/local/bin/ffmpeg
            ~/.local/lib/python3.12/site-packages
          key: ${{ runner.os }}-deps-v6-${{ hashFiles('.github/workflows/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-v6-

      - name: Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          if ! command -v ffmpeg &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y ffmpeg
          else
            echo "ffmpeg is already cached."
          fi
          pip install --upgrade -r .github/workflows/requirements.txt
          echo "Python user base: $(python3 -m site --user-base)"
          echo "Python user site: $(python3 -m site --user-site)"
      - name: Add user bin to PATH
        run: echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV

      - name: Resolve Short Links
        id: resolve
        run: |
          URL="${{ github.event.inputs.url }}"
          if [[ "$URL" == *"pin.it"* ]]; then
            echo "Short pin.it URL detected. Resolving..."
            FINAL_URL=$(curl -s -L -o /dev/null -w '%{url_effective}' "$URL")
            echo "Resolved URL: $FINAL_URL"
            echo "url=$FINAL_URL" >> $GITHUB_OUTPUT
          else
            echo "URL is not a short link. Using original."
            echo "url=$URL" >> $GITHUB_OUTPUT
          fi

      - name: Download Video (Optimized gallery-dl Method)
        id: download
        run: |
          VIDEO_URL="${{ steps.resolve.outputs.url }}"
          FINAL_FILENAME="video.mp4"

          if [[ "$VIDEO_URL" == *"pinterest.com"* ]]; then
            echo "Pinterest URL detected. Using gallery-dl for robust download."
            python3 -m gallery_dl \
              --verbose \
              --directory . \
              --no-check-certificate \
              --download-archive archive.txt \
              --filename "video.mp4" \
              "$VIDEO_URL"
          else
            echo "Non-Pinterest URL. Using yt-dlp..."
            python3 -m yt_dlp \
              --format "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" \
              --merge-output-format mp4 \
              --output "$FINAL_FILENAME" \
              "$VIDEO_URL"
          fi
          
          if [ -s "$FINAL_FILENAME" ]; then
            FILESIZE=$(stat -c%s "$FINAL_FILENAME")
            echo "‚úÖ Download successful. File is '$FINAL_FILENAME' with size $FILESIZE bytes."
            echo "filepath=$FINAL_FILENAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Download failed or resulted in an empty file after all attempts."
            exit 1
          fi

      - name: Upload to Catbox
        id: catbox
        run: |
          FILE_PATH="${{ steps.download.outputs.filepath }}"
          UNIQUE_FILENAME="video-$(date +%s)-${RANDOM}.mp4"
          echo "Uploading $FILE_PATH as $UNIQUE_FILENAME to Catbox..."
          
          OUTPUT_LINK=$(curl -F "reqtype=fileupload" -F "fileToUpload=@$FILE_PATH;filename=$UNIQUE_FILENAME" https://catbox.moe/user/api.php)
          
          echo "Catbox API Response: '$OUTPUT_LINK'"
          if [[ -n "$OUTPUT_LINK" && "$OUTPUT_LINK" =~ ^https:// ]]; then
            echo "‚úÖ Upload successful: $OUTPUT_LINK"
            echo "link=$OUTPUT_LINK" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Upload Failed. Response was empty or not a URL."
            exit 1
          fi

      - name: Send Result to Discord
        if: success()
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ -n "$MESSAGE_ID" ]; then
            curl -s -X POST -H "Content-Type: application/json" \
            -d '{"content": "üîó Result for message '"$MESSAGE_ID"': ${{ steps.catbox.outputs.link }}"}' \
            "${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          fi
      
      - name: Notify on Failure
        if: failure()
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ -n "$MESSAGE_ID" ]; then
            curl -s -X POST -H "Content-Type: application/json" \
            -d '{"content": "‚ùå Failed to process URL for message '"$MESSAGE_ID"': ${{ github.event.inputs.url }}"}' \
            "${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          fi
