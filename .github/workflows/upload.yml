name: Upload Video to Catbox

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Video URL (TikTok, Instagram, Pinterest, etc.)'
        required: true
        type: string
      message_id:
        description: 'Discord Message ID for response tracking'
        required: false
        type: string

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ffmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg

      - name: Install dependencies
        run: |
          pip install git+https://github.com/yt-dlp/yt-dlp.git
          pip install requests

      - name: Warm up Facebook link (if needed)
        run: |
          VIDEO_URL="${{ github.event.inputs.url }}"
          VIDEO_URL=$(echo "$VIDEO_URL" | xargs)
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          
          # –Ø–∫—â–æ —Ü–µ Facebook ‚Äî "–ø—Ä–æ–≥—Ä—ñ–≤–∞—î–º–æ" –ø–æ—Å–∏–ª–∞–Ω–Ω—è
          if [[ "$VIDEO_URL" == *"facebook.com"* ]] || [[ "$VIDEO_URL" == *"fb.watch"* ]]; then
            echo "üî• –ü—Ä–æ–≥—Ä—ñ–≤ Facebook –ø–æ—Å–∏–ª–∞–Ω–Ω—è..."
            curl -s -L -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36" \
              --max-time 30 \
              "$VIDEO_URL" > /dev/null 2>&1 || echo "–ü—Ä–æ–≥—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞ - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
            sleep 3
          fi

      - name: Check content type and process
        id: content_processor
        run: |
          VIDEO_URL="${{ github.event.inputs.url }}"
          VIDEO_URL=$(echo "$VIDEO_URL" | xargs)
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          
          echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É: $VIDEO_URL"
          
          # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
          INFO=$(yt-dlp --dump-json --simulate "$VIDEO_URL" 2>/dev/null)
          
          if [ -z "$INFO" ]; then
            echo "type=error" >> $GITHUB_OUTPUT
            echo "message=–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è" >> $GITHUB_OUTPUT
            if [ "${{ secrets.DISCORD_RESULTS_WEBHOOK }}" != "" ] && [ "$MESSAGE_ID" != "" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d '{"content": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è message '"$MESSAGE_ID"'"}' \
                ${{ secrets.DISCORD_RESULTS_WEBHOOK }}
            fi
            exit 0
          fi
          
          # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
          HAS_VIDEO=$(echo "$INFO" | python3 -c "
import sys, json
try:
    info = json.load(sys.stdin)
    formats = info.get('formats', [])
    # –®—É–∫–∞—î–º–æ –≤—ñ–¥–µ–æ—Ñ–æ—Ä–º–∞—Ç–∏
    if any(f.get('vcodec', 'none') != 'none' or 'video' in str(f.get('format', '')) for f in formats):
        print('video')
    # –®—É–∫–∞—î–º–æ –∞—É–¥—ñ–æ—Ñ–æ—Ä–º–∞—Ç–∏
    elif any(f.get('acodec', 'none') != 'none' or 'audio' in str(f.get('format', '')) for f in formats):
        print('audio')
    # –®—É–∫–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    elif info.get('thumbnail') or any('image' in str(f.get('ext', '')) for f in formats):
        print('image')
    else:
        print('text')
except Exception as e:
    print('unknown')
")
          
          echo "type=$HAS_VIDEO" >> $GITHUB_OUTPUT
          echo "title=$(echo "$INFO" | python3 -c "import sys, json; print(json.load(sys.stdin).get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏'))")" >> $GITHUB_OUTPUT
          
          # –Ø–∫—â–æ —Ü–µ –≤—ñ–¥–µ–æ ‚Äî –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–æ
          if [ "$HAS_VIDEO" = "video" ]; then
            echo "processing=video" >> $GITHUB_OUTPUT
          else
            # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ
            CONTENT_TYPE=""
            case "$HAS_VIDEO" in
              "image")
                CONTENT_TYPE="üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞"
                ;;
              "audio")
                CONTENT_TYPE="üéµ –ê—É–¥—ñ–æ"
                ;;
              "text")
                CONTENT_TYPE="üìù –¢–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç"
                ;;
              *)
                CONTENT_TYPE="üìÑ –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É"
                ;;
            esac
            
            if [ "${{ secrets.DISCORD_RESULTS_WEBHOOK }}" != "" ] && [ "$MESSAGE_ID" != "" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d '{"content": "'"$CONTENT_TYPE"' –¥–ª—è message '"$MESSAGE_ID"'"}' \
                ${{ secrets.DISCORD_RESULTS_WEBHOOK }}
            fi
            echo "processing=skip" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Check and upload video
        if: steps.content_processor.outputs.processing == 'video'
        id: catbox
        run: |
          # –û—á–∏—â–∞—î–º–æ URL
          VIDEO_URL="${{ github.event.inputs.url }}"
          VIDEO_URL=$(echo "$VIDEO_URL" | xargs)
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          MAX_SIZE_BYTES=$((180 * 1024 * 1024))  # 180 MB

          echo "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ Catbox..."
          
          # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ –æ–¥—Ä–∞–∑—É –≤–∏–≤–∞–Ω—Ç–∞–∂—É—î–º–æ
          OUTPUT_LINK=$(yt-dlp \
            --retries 3 \
            --fragment-retries 3 \
            --sleep-interval 2 \
            --merge-output-format mp4 \
            --allow-unplayable-formats \
            --extractor-args "pinterest:use_webpage=True" \
            --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36" \
            --no-check-certificate \
            --output - \
            "$VIDEO_URL" | \
            curl -H "Expect:" \
            -F "reqtype=fileupload" \
            -F "fileToUpload=@-;filename=video.mp4;type=video/mp4" \
            https://catbox.moe/user/api.php)

          if [[ "$OUTPUT_LINK" =~ ^https:// ]]; then
            echo "‚úÖ –£—Å–ø—ñ—à–Ω–æ: $OUTPUT_LINK"
            echo "link=$OUTPUT_LINK" >> $GITHUB_OUTPUT
          else
            echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: $OUTPUT_LINK"
            if [ "${{ secrets.DISCORD_RESULTS_WEBHOOK }}" != "" ] && [ "$MESSAGE_ID" != "" ]; then
              curl -X POST -H "Content-Type: application/json" \
                -d '{"content": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞ Catbox –¥–ª—è message '"$MESSAGE_ID"'"}' \
                ${{ secrets.DISCORD_RESULTS_WEBHOOK }}
            fi
            exit 1
          fi

      - name: Send result to results channel
        if: success() && steps.content_processor.outputs.processing == 'video'
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ "${{ secrets.DISCORD_RESULTS_WEBHOOK }}" != "" ] && [ "$MESSAGE_ID" != "" ]; then
            curl -X POST -H "Content-Type: application/json" \
            -d '{"content": "üîó Result for message '"$MESSAGE_ID"': ${{ steps.catbox.outputs.link }}"}' \
            ${{ secrets.DISCORD_RESULTS_WEBHOOK }}
          elif [ "${{ secrets.DISCORD_RESULTS_WEBHOOK }}" != "" ]; then
            curl -X POST -H "Content-Type: application/json" \
            -d '{"content": "üéûÔ∏è ${{ steps.catbox.outputs.link }}"}' \
            ${{ secrets.DISCORD_RESULTS_WEBHOOK }}
          fi
