name: Video Uploader v22.0 (Corrected Scraper)

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Video URL (e.g., https://pin.it/5Vs6LqACQ or https://www.pinterest.com/pin/123456789/)'
        required: true
      message_id:
        description: 'Discord Message ID'
        required: false

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      # Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-final-deps-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-final-deps-

      # Cache apt-get packages
      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-ffmpeg-${{ hashFiles('**/apt-cache.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-ffmpeg-

      # Install dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          pip install --upgrade git+https://github.com/yt-dlp/yt-dlp.git gallery-dl requests beautifulsoup4
          echo "Dependencies installed successfully"

      # Download video (Optimized Hybrid Method)
      - name: Download Video
        id: download
        run: |
          VIDEO_URL="${{ github.event.inputs.url }}"
          FINAL_FILENAME="video.mp4"

          # Resolve pin.it short URLs
          if [[ "$VIDEO_URL" == *"pin.it"* ]]; then
            echo "Resolving pin.it short URL..."
            RESPONSE=$(curl -s -L -o /dev/null -w "%{url_effective}" "$VIDEO_URL")
            if [[ "$RESPONSE" == *"pinterest.com"* ]]; then
              VIDEO_URL="$RESPONSE"
              echo "Resolved to: $VIDEO_URL"
            else
              echo "Failed to resolve pin.it URL"
              exit 1
            fi
          fi

          if [[ "$VIDEO_URL" == *"pinterest.com"* ]]; then
            echo "Pinterest URL detected. Using embedded Python scraper..."

            # Create temporary Python script
            cat << 'EOF' > scraper.py
import requests
import sys
from bs4 import BeautifulSoup

url = sys.argv[1]
filename = sys.argv[2]

try:
    with requests.Session() as s:
        s.headers.update({"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"})
        r = s.post("https://pinterestdownloader.com/download.php", data={"url": url}, timeout=10)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        link = soup.find("a", class_="download-link") or soup.find("a", href=lambda x: x and ".mp4" in x)
        if link and link.get("href"):
            video_url = link["href"]
            print(f"Found direct URL: {video_url}")
            vr = s.get(video_url, stream=True, timeout=20)
            vr.raise_for_status()
            with open(filename, "wb") as f:
                for chunk in vr.iter_content(chunk_size=8192):
                    f.write(chunk)
            print("Download via scraper successful")
        else:
            print("No valid download link found", file=sys.stderr)
            sys.exit(1)
except Exception as e:
    print(f"Scraper failed: {e}", file=sys.stderr)
    sys.exit(1)
EOF

            python3 scraper.py "$VIDEO_URL" "$FINAL_FILENAME"
            if [ ! -s "$FINAL_FILENAME" ]; then
              echo "‚ö†Ô∏è Scraper method failed. Falling back to gallery-dl..."
              gallery-dl --verbose --directory . "$VIDEO_URL"
              DOWNLOADED_FILE=$(find . -maxdepth 1 -type f -name "*.mp4" | head -n 1)
              if [ -n "$DOWNLOADED_FILE" ]; then
                mv "$DOWNLOADED_FILE" "$FINAL_FILENAME"
              else
                echo "‚ùå Gallery-dl failed to download video"
                exit 1
              fi
            fi
          else
            echo "Non-Pinterest URL. Using yt-dlp..."
            yt-dlp \
              --format "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" \
              --merge-output-format mp4 \
              --output "$FINAL_FILENAME" \
              "$VIDEO_URL"
          fi

          if [ -s "$FINAL_FILENAME" ]; then
            echo "‚úÖ Download successful. File is '$FINAL_FILENAME' and size is $(stat -c%s "$FINAL_FILENAME") bytes."
            echo "filepath=$FINAL_FILENAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Download failed or resulted in an empty file."
            exit 1
          fi

      # Upload to Catbox
      - name: Upload to Catbox
        id: catbox
        run: |
          FILE_PATH="${{ steps.download.outputs.filepath }}"
          UNIQUE_FILENAME="video-$(date +%s)-${{ github.run_id }}-${RANDOM}.mp4"
          echo "Uploading $FILE_PATH as $UNIQUE_FILENAME to Catbox..."

          OUTPUT_LINK=$(curl -s -F "reqtype=fileupload" -F "fileToUpload=@$FILE_PATH;filename=$UNIQUE_FILENAME" https://catbox.moe/user/api.php)

          echo "Catbox API Response: '$OUTPUT_LINK'"
          if [[ -n "$OUTPUT_LINK" && "$OUTPUT_LINK" =~ ^https:// ]]; then
            echo "‚úÖ Upload successful: $OUTPUT_LINK"
            echo "link=$OUTPUT_LINK" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Upload failed. Response was empty or not a URL."
            exit 1
          fi

      # Send result to Discord
      - name: Send Result to Discord
        if: success()
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ -n "$MESSAGE_ID" ]; then
            curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"content\": \"üîó Result for message '$MESSAGE_ID': ${{ steps.catbox.outputs.link }}\"}" \
              "${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          fi

      # Notify on failure
      - name: Notify on Failure
        if: failure()
        run: |
          MESSAGE_ID="${{ github.event.inputs.message_id }}"
          if [ -n "$MESSAGE_ID" ]; then
            curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"content\": \"‚ùå Failed to process URL for message '$MESSAGE_ID': ${{ github.event.inputs.url }}\"}" \
              "${{ secrets.DISCORD_RESULTS_WEBHOOK }}"
          fi
